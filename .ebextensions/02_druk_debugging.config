option_settings:
  aws:elasticbeanstalk:container:python:
    WSGIPath: wsgi:application
  aws:elasticbeanstalk:application:environment:
    PYTHONPATH: "/var/app/current"

files:
  "/opt/elasticbeanstalk/hooks/appdeploy/post/03_create_knowledge_base.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      echo "Setting up knowledge base and directories..."
      
      # Ensure knowledge base directory exists with proper permissions
      mkdir -p /var/app/current/knowledge_base/{laws_simplified,offices,rights,services}
      chown -R webapp:webapp /var/app/current/knowledge_base/
      chmod -R 755 /var/app/current/knowledge_base/
      
      # Ensure static directory exists
      mkdir -p /var/app/current/static
      chown -R webapp:webapp /var/app/current/static/
      chmod -R 755 /var/app/current/static/
      
      # Create a simple index.html if it doesn't exist
      if [ ! -f /var/app/current/static/index.html ]; then
          cat > /var/app/current/static/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Ask Druk - Bhutan's AI Citizen Assistant</title>
    <meta charset="UTF-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .header { text-align: center; margin-bottom: 40px; }
        .flag { font-size: 48px; }
    </style>
</head>
<body>
    <div class="header">
        <div class="flag">üáßüáπ</div>
        <h1>Kuzuzangpo! Welcome to Ask Druk</h1>
        <p>Bhutan's AI-powered Citizen Assistant</p>
    </div>
    <div>
        <h2>Available Services:</h2>
        <ul>
            <li><a href="/health">Health Check</a></li>
            <li><a href="/emergency-contacts">Emergency Contacts</a></li>
            <li>Chat API: POST /chat</li>
            <li>Session Init: POST /initialize-session</li>
        </ul>
    </div>
</body>
</html>
EOF
          chown webapp:webapp /var/app/current/static/index.html
      fi
      
      echo "Knowledge base setup completed"

  "/opt/elasticbeanstalk/hooks/appdeploy/post/04_debug_environment.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      echo "=== DEBUGGING ENVIRONMENT ==="
      echo "Current user: $(whoami)"
      echo "Current directory: $(pwd)"
      echo "Python version: $(python --version)"
      echo "Pip version: $(pip --version)"
      
      echo "=== CHECKING FILES ==="
      ls -la /var/app/current/
      echo "WSGI file exists: $(ls -la /var/app/current/wsgi.py)"
      echo "Application file exists: $(ls -la /var/app/current/application.py)"
      
      echo "=== CHECKING DEPENDENCIES ==="
      pip list | grep -E "(fastapi|uvicorn|gunicorn|llama-index)"
      
      echo "=== ENVIRONMENT VARIABLES ==="
      env | grep -E "(AZURE|PYTHON|PORT)" | head -10
      
      echo "=== TESTING PYTHON IMPORT ==="
      cd /var/app/current
      python -c "
try:
    import application
    print('‚úÖ Application module imports successfully')
    print(f'App object: {application.app}')
except Exception as e:
    print(f'‚ùå Import error: {e}')
    import traceback
    traceback.print_exc()
"

commands:
  01_install_ai_dependencies:
    command: "pip install --no-cache-dir llama-index==0.12.27 llama-index-core==0.12.27 llama-index-llms-azure-openai==0.3.2 llama-index-embeddings-azure-openai==0.3.2"
    ignoreErrors: true
    
  02_verify_fastapi:
    command: "pip install --no-cache-dir fastapi==0.115.12 uvicorn==0.27.0"
    ignoreErrors: true
